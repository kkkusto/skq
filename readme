import os
import pandas as pd

# Function to add a 'duration_in_mins' column
def add_duration_in_mins(df, duration_col='Duration'):
    """
    Adds a new column 'duration_in_mins' to the DataFrame, converting time duration into minutes.
    
    Parameters:
    - df (pd.DataFrame): Input DataFrame containing the duration column.
    - duration_col (str): Name of the column with duration in 'HH:MM:SS' format.
    
    Returns:
    - pd.DataFrame: DataFrame with the new column 'duration_in_mins'.
    """
    def convert_to_minutes(duration):
        # Handle edge cases for missing or malformed data
        if not isinstance(duration, str):
            return None
        parts = duration.split(':')
        if len(parts) == 3:  # HH:MM:SS
            hours, minutes, seconds = map(int, parts)
            return hours * 60 + minutes + seconds / 60
        elif len(parts) == 2:  # MM:SS
            minutes, seconds = map(int, parts)
            return minutes + seconds / 60
        return None  # Return None for invalid formats

    df['duration_in_mins'] = df[duration_col].apply(convert_to_minutes)
    return df

# Directory containing the files
input_folder = 'path_to_your_folder'
output_file = 'combined_modified_file.csv'

# List to store all processed DataFrames
all_dfs = []

# Iterate over all files in the input folder
for file_name in os.listdir(input_folder):
    if file_name.endswith('.csv'):  # Process only CSV files
        file_path = os.path.join(input_folder, file_name)
        
        try:
            # Read the CSV file into a DataFrame
            df = pd.read_csv(file_path)
            
            # Apply the duration conversion function
            df_modified = add_duration_in_mins(df, duration_col='Duration')
            
            # Add a column to track the original file name
            df_modified['source_file'] = file_name
            
            # Append the modified DataFrame to the list
            all_dfs.append(df_modified)
            
            print(f"Processed: {file_name}")
        except Exception as e:
            print(f"Error processing {file_name}: {e}")

# Combine all DataFrames into a single DataFrame
if all_dfs:
    combined_df = pd.concat(all_dfs, ignore_index=True)
    
    # Save the combined DataFrame to a single file
    combined_df.to_csv(output_file, index=False)
    print(f"Combined file saved as: {output_file}")
else:
    print("No valid files were processed.")
